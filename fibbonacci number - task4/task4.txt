Сегодня Вашему внимания предлагается сложная задача. Она имеет два решения (простое и сложное), хотя даже простая версия может вызвать некоторые затруднения. В любом случае, предлагается сначала решить простую версию и после переделать под сложную. Итак, Ваша задача будет реализовать алгоритм поиска чисел Фибоначчи. Если Вам не известно, что такое числа Фибоначчи, то перед выполнением задачи предлагаю ознакомится со статьей на Википедии.

Простая версия задания
Итак, Вам предстоит реализовать класс FibCalculator (он вложен в класс ThreadHelper). Данный класс являет собой поток, который рассчитывает заданное число Фибоначчи. Этот класс должен иметь следующий API:

// конструктор, который принимает на вход какое число из чисел Фибоначчи нужно подсчитать
public FibCalculator(final int numberToCalculate);
// метод, который возвращает результат подсчета
public int getResult();
Напомню как выглядит ряд чисел Фибоначчи:

1 1 2 3 5 8 13 ...

Пример использования класса FibCalculator:

final FibCalculator calculator = new FibCalculator(1);
calculator.start();
calculator.join();
calculator.getResult(); // объект класса должен вернуть значение 1, так как первый элемент ряда Фибоначчи равен 1
final FibCalculator calculator = new FibCalculator(2);
calculator.start();
calculator.join();
calculator.getResult(); // объект класса должен вернуть значение 1, так как второй элемент ряда Фибоначчи равен 1
final FibCalculator calculator = new FibCalculator(3);
calculator.start();
calculator.join();
calculator.getResult(); // объект класса должен вернуть значение 2, так как третий элемент ряда Фибоначчи равен 2
Сложная версия
В сложной версии предлагается при вычислении какого-либо числа Фибоначчи (например число №4) создать два потока, один поток должен будет вычислить значение числа Фибоначчи №3, второй №2, после дождаться пока оба потока отработают и сложить два результата. Это и будет искомое значение числа Фибоначчи №4.